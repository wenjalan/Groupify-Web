{"version":3,"sources":["serviceWorker.js","WelcomePage.js","ConsolePage.js","PlaylistCreatedPage.js","GroupifyWeb.js","index.js"],"names":["Boolean","window","location","hostname","match","WelcomeHeader","href","WelcomePage","props","handleClick","bind","this","onCreateParty","onClick","React","Component","GuestList","state","guests","map","ConsolePage","loadInviteLink","loadGuestList","inviteLink","i","setInterval","setState","interval","i2","interval2","clearInterval","getPartyInvite","joinUrl","console","log","getGuestList","guestList","onCreatePlaylist","PlaylistCreatedPage","playlistLink","API_ENDPOINT","GroupifyWeb","stage","partyId","partyInvite","createParty","createPlaylist","fetch","method","headers","then","response","json","catch","error","authUrl","index","search","id","substring","open","endpointUrl","users","res","playlistUrl","prevState","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1ac06405.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\n\r\n// welcome page class, shown at startup\r\nclass WelcomePage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    handleClick() {\r\n        this.props.onCreateParty();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <WelcomeHeader />\r\n                <button onClick={this.handleClick}>\r\n                    START THE PARTY\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// welcome header\r\nfunction WelcomeHeader() {\r\n    return (\r\n        <div>\r\n            <h1><b>> Groupify Alpha</b></h1>\r\n            <h2>A Spotify app for people with friends.</h2>\r\n            <h6>Alpha Version \"will literally break if a single thing goes wrong\". <a href='https://github.com/wenjalan/Groupify'>GitHub</a></h6>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default (WelcomePage);","import React from 'react';\r\n\r\nclass ConsolePage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.loadInviteLink = this.loadInviteLink.bind(this);\r\n        this.loadGuestList = this.loadGuestList.bind(this);\r\n        this.state = {\r\n            inviteLink: 'loading...',\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        if (this.state.inviteLink == 'loading...') {\r\n            let i = setInterval(this.loadInviteLink, 5000);\r\n            this.setState({\r\n                interval: i,\r\n            })\r\n        }\r\n        // start refreshing guest list\r\n        let i2 = setInterval(this.loadGuestList, 5000);\r\n        this.setState({\r\n            interval2: i2,\r\n        });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        // stop updating guest list\r\n        clearInterval(this.state.interval)\r\n        clearInterval(this.state.interval2);\r\n    }\r\n\r\n    async loadInviteLink() {\r\n        let joinUrl = await this.props.getPartyInvite();\r\n        if (joinUrl != null) {\r\n            clearInterval(this.state.interval);\r\n            this.setState({\r\n                inviteLink: joinUrl,\r\n            });\r\n        }\r\n    }\r\n\r\n    async loadGuestList() {\r\n        // constantly refresh every 5 seconds\r\n        console.log('refreshing guest list...');\r\n        let guestList = await this.props.getGuestList();\r\n        this.setState({\r\n            guests: guestList,\r\n        });\r\n    }\r\n\r\n    handleClick() {\r\n        this.props.onCreatePlaylist();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>> Let's Get Groovin'</h1>\r\n                <h2>Current Party:</h2>\r\n                <GuestList guests={this.state.guests}/>\r\n                <h3>Invite Link: <a>{this.state.inviteLink}</a></h3>\r\n                <button onClick={this.handleClick}>\r\n                    EVERYONE'S READY\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction GuestList(state) {\r\n    let guests = state.guests;\r\n    if (guests == null) {\r\n        return (<li>waiting...</li>);\r\n    }\r\n    return guests.map((guests) => \r\n        <li>{guests}</li>\r\n    );\r\n}\r\n\r\nexport default (ConsolePage);","import React from 'react';\r\n\r\nclass PlaylistCreatedPage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            playlistLink: props.playlistLink,\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>> Done.</h1>\r\n                <h3>{this.state.playlistLink}</h3>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default (PlaylistCreatedPage);","import React from 'react';\r\n// import ReactDOM from 'react-dom';\r\nimport './GroupifyWeb.css';\r\n// import * as serviceWorker from './serviceWorker';\r\nimport WelcomePage from './WelcomePage.js';\r\nimport ConsolePage from './ConsolePage.js';\r\nimport PlaylistCreatedPage from './PlaylistCreatedPage';\r\n\r\n// GroupifyWeb class, parent of all sub-pages\r\nconst DEBUG = true;\r\nconst API_ENDPOINT = 'http://24.16.67.60:1000/api';\r\n\r\nclass GroupifyWeb extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = ({\r\n            stage: 0,\r\n            partyId: -1,\r\n            playlistLink: 'null',\r\n            partyInvite: 'hold on',\r\n        });\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.createParty = this.createParty.bind(this);\r\n        this.getPartyInvite = this.getPartyInvite.bind(this);\r\n        this.createPlaylist = this.createPlaylist.bind(this);\r\n        this.getGuestList = this.getGuestList.bind(this);\r\n    }\r\n\r\n    // fired when the user clicks \"Start the Party\" on the WelcomePage\r\n    async createParty() {\r\n        // get the authentication URL\r\n        console.log('requesting create party from service...');\r\n        let endpointUrl = API_ENDPOINT + '/create'\r\n        const response = await fetch(endpointUrl, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            }\r\n        })\r\n        .then((response) => {\r\n            return response.json()\r\n        })\r\n        .catch((error) => {\r\n            console.log('error occurred:', error);\r\n        });\r\n        const authUrl = response.authUrl;\r\n        console.log('got auth url:', authUrl);\r\n\r\n        // save partyId\r\n        let index = authUrl.search('&state=') + 7;\r\n        let id = authUrl.substring(index, index + 5);\r\n\r\n        // open it in a new window\r\n        window.open(authUrl);\r\n\r\n        // set party id state and move onto next page\r\n        this.setState({\r\n            partyId: id,\r\n            stage: 1,\r\n        });\r\n        console.log('set party id to', id);\r\n    }\r\n\r\n    // fired when the ConsolePage loads\r\n    async getPartyInvite() {\r\n        // endpoint url\r\n        const endpointUrl = API_ENDPOINT + '/add?party=' + this.state.partyId;\r\n\r\n        console.log('getting join party url from service...');\r\n        let response = await fetch(endpointUrl, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            }\r\n        })\r\n        .then((response) => {\r\n            return response.json();\r\n        })\r\n        .catch((error) => {\r\n            console.error('error:' + error);\r\n            return null;\r\n        });\r\n\r\n        // handle response\r\n        if (response == null) {\r\n            console.log('party not found')\r\n            return null;\r\n        }\r\n        else {\r\n            const joinUrl = response.authUrl;\r\n            console.log('got url:' + joinUrl);\r\n            return joinUrl;\r\n        }\r\n    }\r\n\r\n    // fired when the ConsolePage starts\r\n    async getGuestList() {\r\n        const endpointUrl = API_ENDPOINT + '/party?id=' + this.state.partyId;\r\n        const response = await fetch(endpointUrl, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            }\r\n        })\r\n        .then((response) => {\r\n            return response.json()\r\n        })\r\n        .catch((error) => {\r\n            console.log('error:', error);\r\n        });\r\n        return response.users;\r\n    }\r\n\r\n    // fired when the user clicks \"Everyone's In\" on the ConsolePage\r\n    async createPlaylist() {\r\n        console.log('creating playlist...');\r\n        let endpointUrl = API_ENDPOINT + '/make?party=' + this.state.partyId;\r\n        let res = await fetch(endpointUrl, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            }\r\n        })\r\n        .then((response) => {\r\n            return response.json();\r\n        })\r\n        .catch((error) => {\r\n            console.error('error:' + error);\r\n        })\r\n\r\n        // if no response\r\n        if (res == null) {\r\n            console.error('couldn\\'t retrieve url from service:', res);\r\n            return null;\r\n        }\r\n\r\n        // if response\r\n        const playlistUrl = res.playlistUrl;\r\n        console.log('got playlist url:', playlistUrl);\r\n\r\n        // move onto PlaylistCreatedPage\r\n        this.setState({\r\n            playlistLink: playlistUrl,\r\n            stage: 2,\r\n        });\r\n\r\n        return playlistUrl;\r\n    }\r\n    \r\n    handleClick() {\r\n        this.setState(prevState => ({\r\n            stage: (prevState.stage + 1) % 3,\r\n        }));\r\n    }\r\n\r\n    render() {\r\n        // welcome page\r\n        if (this.state.stage == 0) {\r\n            return (\r\n                <div>\r\n                    <WelcomePage onCreateParty={this.createParty} />\r\n                    {/* <button className=\"debug-controls\" onClick={this.handleClick}>\r\n                        stage: {this.state.stage}\r\n                    </button> */}\r\n                </div>\r\n            );\r\n        }\r\n        else if (this.state.stage == 1) {\r\n            return (\r\n                <div>\r\n                    <ConsolePage onCreatePlaylist={this.createPlaylist} getPartyInvite={this.getPartyInvite} getGuestList={this.getGuestList}/>\r\n                    {/* <button className=\"debug-controls\" onClick={this.handleClick}>\r\n                        stage: {this.state.stage}\r\n                    </button> */}\r\n                </div>\r\n            );\r\n        }\r\n        else if (this.state.stage == 2) {\r\n            return (\r\n                <div>\r\n                    <PlaylistCreatedPage playlistLink={this.state.playlistLink} />\r\n                    {/* <button className=\"debug-controls\" onClick={this.handleClick}>\r\n                        stage: {this.state.stage}\r\n                    </button> */}\r\n                </div>\r\n            );\r\n        }\r\n        else {\r\n            return (\r\n                <div>\r\n                    <h2>whoops, something went wrong</h2>\r\n                    {/* <button class=\"debug-controls\" onClick={this.handleClick}>\r\n                        stage: {this.state.stage}\r\n                    </button> */}\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default (GroupifyWeb);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport GroupifyWeb from './GroupifyWeb.js';\n\n// render\nReactDOM.render(\n\t<GroupifyWeb />,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}